# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_simulation.ipynb (unless otherwise specified).

__all__ = ['Simulation', 'Simulation_Honda']

# Cell
import torch, numpy as np, matplotlib.pyplot as plt
from scipy.spatial import Voronoi,voronoi_plot_2d

# Cell
class Simulation(object):
    '''Abstract class for vertex dynamics simulations

    Children should implement following methods:
    - `_energy(self,...)`: calculates systems energy
    - `_force(self,...)`: calculates forces acting on all vertices
    (you can implement either one, or both of the energy and force functions)
    - `sample_trajectory(self,...)`: simulates dynamics and samples vertex trajectories.
    This method should use either force or energy (spatial gradient) to simulate the system dynamics.
    '''
    def __init__(self,m=None):
        '''m: `Monolayer` or `Graph` object (e.g. cells defined as polygons).'''
        pass
    def _energy(self):
        pass
    def _force(self):
        pass
    def sample_trajectory(self, T=10000, delta_T=0.001, sample_freq=10, T_ignore=500):
        '''
        Run simulation for `T` time steps and sample vertex trajectories with frequency `sample_freq`.
        - `T`  : total number of time steps
        - `delta_T`: step size (e.g. for the numerical integration using Euler's method)
        - `sample_freq`: Trajectory sampling frequency. Use `assert (T % sample_freq == 0)` in your implementation.
        - `T_ignore`: number of initial time steps to ignore.
        '''
        pass

# Cell
class Simulation_Honda(Simulation):
    '''Honda et al. definition of Vertex model.
    _See_ Fletcher _et al._ 2013 for details.'''
    def __init__(self, m=None):
        '''Init'''
        super().__init__(m=m)