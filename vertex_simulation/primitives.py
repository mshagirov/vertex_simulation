#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_primitives.ipynb (unless otherwise specified).

__all__ = ['Vertex']

#Cell
import torch
class Vertex(object):
    '''Implements vertex and stores its position as a 1x2 `torch.Tensor`:(x,y).

    - Methods:
        > `dist(self,other)`

        > `zero_grad_(self)`

        > `grad(self)`
    - Properties :
        > `x`
    '''
    def __init__(self,location=None):
        '''access `location` with self.x '''
        self._x=location

    def dist(self,other):
        '''Calculate (Euclidean) distance to another vertex'''
        return torch.sqrt(torch.sum(torch.pow(other.x - self._x,2)))

    def zero_grad_(self):
        '''set gradients to zero if x.requires_grad==True'''
        if self._x.grad is not None:
            self._x.grad.data.zero_()

    def grad(self):
        '''Get accumulated gradients w/ respect to x (calculated with backprop)'''
        if self._x.grad is not None:
            return self._x.grad

    @property
    def x(self):
        '''Get current location'''
        return self._x
    @x.setter
    def x(self, val):
        self._x = val

    def __str__(self):
        return f"{self._x.tolist()}"
    def __repr__(self):
        return f"{self._x};{self._x.dtype}"
